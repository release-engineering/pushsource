from collections import Mapping, Sequence, MutableSequence
from typing import Text, overload, List, Optional

from pushsource import PushItem

class ErratumReference(object):
    href: Text
    id: Text
    title: Text
    type: Text = ...
    @classmethod
    @overload
    def _from_data(
        cls, data: Sequence[Mapping[Text, ...]]
    ) -> MutableSequence["ErratumReference"]: ...
    @classmethod
    @overload
    def _from_data(cls, data: Mapping[Text, ...]) -> "ErratumReference": ...

class ErratumModule(object):
    name: Text
    stream: Text
    version: Text
    context: Text
    arch: Text
    @classmethod
    def _from_data(cls, data: Mapping[Text, ...]) -> Optional["ErratumModule"]: ...

class ErratumPackage(object):
    arch: Text
    filename: Text
    epoch: Text
    name: Text
    version: Text
    release: Text
    src: Text
    reboot_suggested: bool = ...
    md5sum: Optional[Text] = ...
    sha1sum: Optional[Text] = ...
    sha256sum: Optional[Text] = ...

class ErratumPackageCollection(object):
    name: Text = ...
    packages: Sequence[ErratumPackage] = ...
    short: Text = ...
    module: Optional[ErratumModule] = ...
    @classmethod
    @overload
    def _from_data(
        cls, data: Sequence[Mapping[Text, ...]]
    ) -> MutableSequence["ErratumPackageCollection"]: ...
    @classmethod
    @overload
    def _from_data(cls, data: Mapping[Text, ...]) -> "ErratumPackageCollection": ...

def errata_type_converter(value: Text) -> Text: ...

class ErratumPushItem(PushItem):
    type: Text = ...
    release: Text = ...
    status: Text = ...
    pushcount: Text = ...
    reboot_suggested: bool = ...
    references: Sequence[ErratumReference] = ...
    pkglist: Sequence[ErratumPackageCollection] = ...
    from_: Optional[Text] = ...
    rights: Optional[Text] = ...
    title: Optional[Text] = ...
    description: Optional[Text] = ...
    version: Text = ...
    updated: Text = ...
    issued: Optional[Text] = ...
    severity: Optional[Text] = ...
    summary: Optional[Text] = ...
    solution: Optional[Text] = ...
    content_types: Sequence[Text] = ...
    @classmethod
    def _from_data(cls, data: Mapping[Text, ...]) -> "ErratumPushItem": ...
